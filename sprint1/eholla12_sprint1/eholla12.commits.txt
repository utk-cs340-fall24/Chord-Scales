project_files/scale-generation.cpp:
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400   1) #include <vector>
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400   2) #include <iostream>
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400   3) 
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400   4) using namespace std;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400   5) 
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400   6) int main(int argc, char *argv[]){
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400   7)     //each vector will contain 12 notes (the first twelve frets) the first being the open string
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400   8)     vector<string> E_string = {"E", "F", "F#", "G", "G#", "A", "A#", "B", "C", "C#", "D", "D#"};
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400   9)     vector<string> A_string = {"A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"};
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  10)     vector<string> D_string = {"D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B", "C", "C#"};
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  11)     vector<string> G_string = {"G", "G#", "A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#"};
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  12)     vector<string> B_string = {"B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#"};
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  13)     vector<string> e_string = {"E", "F", "F#", "G", "G#", "A", "A#", "B", "C", "C#", "D", "D#"};
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  14) 
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  15)     cout << "Scale or Chord?" <<endl;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  16) 
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  17)     string scaleChord;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  18)     cin >> scaleChord;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  19) 
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  20)     string quality;
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  21) 
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  22)     if(scaleChord == "Chord"){
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  23)         cout << "Major, Minor, Diminished, Augmented?" << endl;
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  24) 
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  25)         cin >> quality;
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  26)     }
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  27) 
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  28)     bool pentatonic;
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  29)     if(scaleChord == "Scale"){
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  30)         cout << "Pentatonic? (0/1)" << endl;
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  31)         cin >> pentatonic;
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  32) 
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  33)         cout << "Mode: Ionian(Major), Dorian, Phrygian, Lydian, Mixolydian, Aeolian(Minor), Locrian(Diminished)" << endl;
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  34)     }
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  35) 
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  36)     cout << "Enter root note" << endl;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  37)     
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  38)     string rootNote;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  39)     cin >> rootNote;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  40) 
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  41)     vector<string> OurScale(7);
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  42) 
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  43)     int extended = 0;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  44)     if(scaleChord == "Chord"){
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  45)         cout << "Extended Chord? (0 (if no), 7, 9, 11, 13)" << endl;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  46)         cin >> extended;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  47)     }
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  48) 
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  49)     int indexOfNote = 100;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  50) 
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  51)     //making sure the note we were given exists
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  52)     for(int i = 0; i < A_string.size(); i++){
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  53)         if(A_string[i] == rootNote){
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  54)             indexOfNote = i;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  55)         }
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  56)     }
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  57)     if(indexOfNote == 100){
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  58)         cerr << "Note not found" << endl;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  59)         return 0;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  60)     }
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  61) 
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  62)     indexOfNote % A_string.size();
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  63) 
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  64)     //Creating our scale, starting at the root note we were given
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  65)     //If major we use the pattern WWHWWWH
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  66)     //If minor we use the pattern WHWWHWW where a whole step is +2 and a half step is +1
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  67) 
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  68)     //modes definitely don't work quite right yet
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  69)     if(quality == "Major" || quality == "Ionian" || quality == "Lydian" || quality == "Mixolydian"){
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  70)         OurScale[0] = A_string[indexOfNote % A_string.size()];
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  71)         OurScale[1] = A_string[(indexOfNote + 2) % A_string.size()];
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  72)         OurScale[2] = A_string[(indexOfNote + 4) % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  73)         if(pentatonic == 0){
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  74)             if(quality == "Lydian"){
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  75)                 OurScale[3] = A_string[(indexOfNote + 6) % A_string.size()];
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  76)             }else{
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  77)                 OurScale[3] = A_string[(indexOfNote + 5) % A_string.size()];
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  78)             }
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  79)         }
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  80)         OurScale[4] = A_string[(indexOfNote + 7) % A_string.size()];
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  81)         OurScale[5] = A_string[(indexOfNote + 9) % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  82)         if(pentatonic == 0){
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  83)             if(quality == "Mixolydian"){
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  84)                 OurScale[6] = A_string[(indexOfNote + 1) % A_string.size()];
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  85)             }else{
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  86)                 OurScale[6] = A_string[(indexOfNote + 11) % A_string.size()];
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  87)             }
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  88)         }
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  89)     }if(quality == "Minor" || quality == "Dorian" || quality == "Phrygian" || quality == "Aeolian"){
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  90)         OurScale[0] = A_string[indexOfNote % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  91)         if(pentatonic == 0){
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  92)             if(quality == "Dorian"){
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  93)                 OurScale[1] = A_string[(indexOfNote + 1) % A_string.size()];
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  94)             }else{
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  95)                 OurScale[1] = A_string[(indexOfNote + 2) % A_string.size()];
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400  96)             }
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400  97)         }
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  98)         OurScale[2] = A_string[(indexOfNote + 3) % A_string.size()];
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400  99)         OurScale[3] = A_string[(indexOfNote + 5) % A_string.size()];
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 100)         OurScale[4] = A_string[(indexOfNote + 7) % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 101)         if(pentatonic == 0){
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400 102)             if(quality == "Dorian"){
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400 103)                 OurScale[5] = A_string[(indexOfNote + 9) % A_string.size()];
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400 104)             }else{
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400 105)                 OurScale[5] = A_string[(indexOfNote + 8) % A_string.size()];
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400 106)             }
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 107)         }
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 108)         OurScale[6] = A_string[(indexOfNote + 10) % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 109)     }if(quality == "Augmented"){
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 110)          OurScale[0] = A_string[indexOfNote % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 111)         OurScale[1] = A_string[(indexOfNote + 3) % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 112)         OurScale[2] = A_string[(indexOfNote + 4) % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 113)         OurScale[3] = A_string[(indexOfNote + 7) % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 114)         OurScale[4] = A_string[(indexOfNote + 8) % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 115)         OurScale[5] = A_string[(indexOfNote + 11) % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 116)         OurScale[6] = A_string[(indexOfNote + 12) % A_string.size()];
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400 117)     }if(quality == "Diminished" || quality == "Locrian"){
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 118)         //diminished scale doesn't include all notes
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 119)         //don't know that we need to change this as diminished scales are not normal
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 120)         OurScale[0] = A_string[indexOfNote % A_string.size()];
cb972470 (Ethan Holland 2024-10-03 14:58:14 -0400 121)         OurScale[1] = A_string[(indexOfNote + 1) % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 122)         OurScale[2] = A_string[(indexOfNote + 3) % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 123)         OurScale[3] = A_string[(indexOfNote + 5) % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 124)         OurScale[4] = A_string[(indexOfNote + 6) % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 125)         OurScale[5] = A_string[(indexOfNote + 8) % A_string.size()];
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 126)         OurScale[6] = A_string[(indexOfNote + 9) % A_string.size()];
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 127)     }
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 128) 
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 129)     //if chord we add the first, third and fifth notes of the scale we have just created to a vector and output
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 130) 
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 131)     vector<string> final;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 132)     if(scaleChord == "Scale"){
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 133)         for(int i = 0; i < OurScale.size(); i++){
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 134)             cout << OurScale.at(i) << " ";
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 135)         }
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 136)         cout << endl;
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 137)         final = OurScale;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 138)     }if(scaleChord == "Chord"){
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 139) 
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 140)         final.push_back(OurScale.at(0));
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 141)         final.push_back(OurScale.at(2));
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 142)         final.push_back(OurScale.at(4));
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 143) 
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 144)         if(extended != 0){
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 145)             if(extended >= 7){
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 146)                 final.push_back(OurScale.at((6) % OurScale.size()));
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 147)             }if(extended >= 9){
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 148)                 final.push_back(OurScale.at((8) % OurScale.size()));
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 149)             }if(extended >= 11){
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 150)                 final.push_back(OurScale.at((10) % OurScale.size()));
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 151)             }if(extended >= 13){
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 152)                 final.push_back(OurScale.at((12) % OurScale.size()));
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 153)             }
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 154)         }
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 155) 
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 156)         for(int i = 0; i < final.size(); i++){
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 157)             cout << final.at(i) << " ";
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 158)         }
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 159)         cout << endl;
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 160)     }
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 161) 
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 162)     //As of this point I have the chord and scale generation done for most common cases, major/minor/diminished/augmented chords/scales
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 163)     //Because of this I want to try and translate these chords/scales to their fretboard positions.
7fe377b5 (Ethan Holland 2024-10-03 14:48:53 -0400 164)     //Below I take a chord/scale and output the fret of each note within it
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 165) 
7078e63f (Ethan Holland 2024-09-25 16:40:00 -0400 166) }
