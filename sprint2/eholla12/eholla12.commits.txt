00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400   8) bool valid_chord(const vector<pair<int, int>>& current_chord, const vector<vector<string>> strings, vector<string> final, string quality){
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400   9)     bool first = false;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  10)     bool third = false;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  11)     bool fifth = false;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  12)     bool playable = true;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  13)     int min_val = 1000;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  14)     int max_val = 0;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  15)     for(const auto& note: current_chord){
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  16)         //cout << note.first << " " << note.second << endl;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  17)         
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  18)         for(int i = 0; i < final.size(); i++){
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  19)             //cout << strings[note.first][note.second] << " == " << final.at(i) << endl;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  20)             if(strings[note.first][note.second] == final.at(i)){
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  21)                 if(i == 0){   
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  22)                     first = true;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  23)                 }if(i == 1){
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  24)                     third = true;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  25)                 }if(i == 2){
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  26)                     fifth = true;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  27)                 }
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  28)             }
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  29)             
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  30)             if(note.second > max_val && note.second != 0){
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  31)                 max_val = note.second;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  32)             }
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  33)             if(note.second < min_val && note.second != 0){
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  34)                 min_val = note.second;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  35)             }
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  36)         }
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  37)     }
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  38)     if((max_val - min_val) > 2){
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  39)         return false;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  40)     }
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  41)     return first && third && fifth;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  42) }
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  43) 
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  44) void Chord_gen(vector<vector<pair<int, int>>>& chord_scale, vector<pair<int, int>>& current_chord, int index, vector<vector<pair<int, int>>>& valid_chords, const vector<vector<string>> strings, vector<string> final, string quality){
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400  45)     if (index == chord_scale.size()) {
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400  46)         // Output the current chord combination
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  47)         if(valid_chord(current_chord, strings, final, quality) == true){
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  48)             for (const auto& note : current_chord) {
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  49)                 //cout << "(" << note.second << ", String " << note.first << ") ";  // Print the pair (note, string)
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  50)                 valid_chords.push_back(current_chord);
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  51)             }
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400  52)         }
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400  53)         return;
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400  54)     }
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400  55) 
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400  56)     for (int i = 0; i < chord_scale[index].size(); i++) {
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400  57)         current_chord.push_back(chord_scale[index][i]);  
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  58)         Chord_gen(chord_scale, current_chord, index + 1, valid_chords, strings, final, quality); 
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400  59)         current_chord.pop_back();  
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400  60)     }
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400  61) }
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400  62) 
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400  63) 
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400  78) 
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400  80)     int sus;
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400  81)
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400  87)         cout << "Suspended chord? (0), 2, 4" << endl;
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400  88)         
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400  89)         cin >> sus;
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400  91) 
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400  92)     bool blues;
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400  93)     bool pentatonic;
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400  94)     if(scaleChord == "Scale"){
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400  95)         cout << "Blues scale? (0/1)" << endl;
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400  96)         cin >> blues;
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400  97) 
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400  98)         if(blues == 0){
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400  99)             cout << "Pentatonic? (0/1)" << endl;
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400 100)             cin >> pentatonic;
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400 101) 
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400 104)         }else{
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400 105)             pentatonic = true;
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400 106)         }
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 107) 
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 108)     }
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 124) 
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 125)     //making sure the note we were given exists
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 135) 
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 136)     indexOfNote % A_string.size();
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 137) 
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 147)         if(pentatonic == 0){
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 148)             if(quality == "Lydian"){
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 149)                 OurScale[3] = A_string[(indexOfNote + 6) % A_string.size()];
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 150)             }else{
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 151)                 OurScale[3] = A_string[(indexOfNote + 5) % A_string.size()];
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 152)             }
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 153)         }
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400 163)     if(quality == "Minor" || quality == "Dorian" || quality == "Phrygian" || quality == "Aeolian" || blues == 1){
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 165)         if(pentatonic == 0){
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 166)             if(quality == "Dorian"){
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400 167)                 OurScale.push_back(A_string[(indexOfNote + 1) % A_string.size()]);
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 168)             }else{
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400 169)                 OurScale.push_back(A_string[(indexOfNote + 2) % A_string.size()]);
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 170)             }
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 171)         }
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400 174)         if(blues == true){
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400 175)             OurScale.push_back(A_string[(indexOfNote + 6) % A_string.size()]);
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400 176)         }
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400 177)         OurScale.push_back(A_string[(indexOfNote + 7) % A_string.size()]);
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 207) 
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 217)         final.push_back(OurScale.at(0));
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 218)         if(sus == 2){
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 219)             final.push_back(OurScale.at(1));
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 220)         }if(sus == 4){
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 221)             final.push_back(OurScale.at(3));
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 222)         }if(sus == 0){
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 223)             final.push_back(OurScale.at(2));
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 224)         }
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 225)         final.push_back(OurScale.at(4));
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 226) 
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 227)         if(extended != 0){
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 228)             if(extended >= 7){
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 229)                 final.push_back(OurScale.at((6) % OurScale.size()));
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 230)             }if(extended >= 9){
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 231)                 final.push_back(OurScale.at((8) % OurScale.size()));
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 232)             }if(extended >= 11){
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 233)                 final.push_back(OurScale.at((10) % OurScale.size()));
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 234)             }if(extended >= 13){
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 235)                 final.push_back(OurScale.at((12) % OurScale.size()));
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 236)             }
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 237)         }
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 238) 
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 244) 
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 245)     //As of this point I have the chord and scale generation done for most common cases, major/minor/diminished/augmented chords/scales
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 246)     //Because of this I want to try and translate these chords/scales to their fretboard positions.
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 247)     //Below I take a chord/scale and output the fret of each note within it
^cb97247 (Ethan Holland     2024-10-03 14:58:14 -0400 248) 
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 249)     vector<pair<int, int>> E_final;
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 250)     vector<pair<int, int>> A_final;
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 251)     vector<pair<int, int>> D_final;
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 252)     vector<pair<int, int>> G_final;
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 253)     vector<pair<int, int>> B_final;
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 254)     vector<pair<int, int>> e_final;
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 255) 
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 256)     //with each pair, the first element is the string and the second is the fret on that string
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 257)     for(int i = 0; i < final.size(); i++){
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 258)         for(int s = 0; s < E_string.size(); s++){
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 259)             if(final.at(i) == e_string.at(s)){
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 260)                 e_final.push_back(make_pair(5, s));
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 261)             }
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 262)             if(final.at(i) == B_string.at(s)){
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 263)                 B_final.push_back(make_pair(4, s));
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 264)             }
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 265)             if(final.at(i) == G_string.at(s)){
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 266)                 G_final.push_back(make_pair(3, s));
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 267)             }
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 268)             if(final.at(i) == D_string.at(s)){
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 269)                 D_final.push_back(make_pair(2, s));
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 270)             }
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 271)             if(final.at(i) == A_string.at(s)){
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 272)                 A_final.push_back(make_pair(1, s));
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 273)             }
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 274)             if(final.at(i) == E_string.at(s)){
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 275)                 E_final.push_back(make_pair(0,s));
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 276)             }
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 277)         }
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 278)     }
c0f06f09 (Ethan Holland     2024-10-16 16:06:30 -0400 279) 
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 280)     vector<vector<pair<int, int>>> chord_scale;
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400 281)     chord_scale.push_back(E_final);
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400 282)     chord_scale.push_back(A_final);
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400 283)     chord_scale.push_back(D_final);
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400 284)     chord_scale.push_back(G_final);
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400 285)     chord_scale.push_back(B_final);
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400 286)     chord_scale.push_back(e_final);
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400 287) 
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400 288)     //if(scaleChord == "Chord"){
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400 289)         vector<pair<int, int>> current_chord;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400 290)         vector<vector<pair<int, int>>> valid_chords;
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400 291) 
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400 292)         //after this call we should have filled valid_chords with chords
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400 293)         Chord_gen(chord_scale, current_chord, 0, valid_chords, strings, final, quality);
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400 294) 
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400 295)        for(int i = 0; i < valid_chords.size(); i++){
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400 296)         for (const auto& note : valid_chords[i]) {
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400 297)             cout << "(" << note.second << ", String " << note.first << ") "; 
1e8c12e7 (Ethan Holland     2024-10-16 17:16:58 -0400 298)         }
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400 299)             cout << endl;
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400 300)        }
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400 301) 
d909723e (Ethan Holland     2024-10-17 11:04:38 -0400 302)         
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400 303)         
00000000 (Not Committed Yet 2024-10-17 14:18:28 -0400 304)     //}
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400 305) }
64a402f4 (Ethan Holland     2024-10-17 10:53:21 -0400 306) 

